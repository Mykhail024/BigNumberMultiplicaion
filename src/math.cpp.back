#include <QRegularExpression>

#include <string>

#include "math.h"

namespace math {
    typedef qsizetype qsize;

    QString addStrings(QString x, QString y)
    {
        if(x.size() > y.size()) {
            y = y.rightJustified(x.size(), '0');
        } else {
            x = x.rightJustified(y.size(), '0');
        }
        int carry = 0, sum;
        QString result;
        for(qsize i = x.size()-1; i >= 0; i--) {
            sum = x[i].digitValue() + y[i].digitValue() + carry;

            if(sum > 9) {
                result.prepend(QString::number(sum % 10));
                carry = sum / 10;
            } else {
                result.prepend(QString::number(sum));
                carry = 0;
            }
        }
        if(carry) {
            result.prepend(QString::number(carry));
        }
        return result;
    }

    QString substractStrings(QString x, QString y)
    {
        if(x.size() > y.size()) {
            y = y.rightJustified(x.size(), '0');
        } else {
            x = x.rightJustified(y.size(), '0');
        }

        QString result;
        int borrow = 0, a, b;
        for(qsize i = x.size()-1; i >= 0; i--) {
            a = x[i].digitValue();
            b = y[i].digitValue();

            if(borrow == 1) {
                a--;
            }

            if(a >= b) {
                borrow = 0;
            } else {
                a += 10;
                borrow = 1;
            }
            result.prepend(QString::number(a - b));
        }
        return removeZero(result);
    }

    QString removeZero(QString str) {
        if(str.isEmpty()) return "0";
        int count = 0;
        for(qsize i = 0; i < str.size(); i++) {
            if(str[i] != '0') break;
            count++;
        }
        if(count == str.size()) return "0";
        return str.mid(count);
    }

    QString addZero(QString str, int count)
    {
        return str.leftJustified(str.size() + count, '0');
    }

    QString multiply(QString x,  QString y)
    {
        if(x.size() == 1 && y.size() == 1) {
            return addStrings(x, y);
        }

        if(x.size() > y.size()) {
            y = y.rightJustified(x.size(), '0');
        } else {
            x = x.rightJustified(y.size(), '0');
        }

        if(x.size() % 2 != 0) {
            x.prepend('0');
            y.prepend('0');
        }

        qsize n = x.size();
        qsize half = n/2;

        QString x_left = x.left(half);
        QString x_right = x.right(half);
        QString y_left = y.left(half);
        QString y_right = y.right(half);

        QString p1 = multiply(x_left, y_left);
        QString p2 = multiply(addStrings(x_left, x_right), addStrings(y_left, y_right));
        QString p3 = multiply(x_right, y_right);

        return addStrings(addStrings(addZero(p1, n), addZero(substractStrings(substractStrings(p2, p1), p3), n/2)), p3);
    }
}
